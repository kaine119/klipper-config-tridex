# =====================================
# =           IDEX Movement           =
# =====================================

# Macros: T0, T1, _PARK_TOOL, _NOZZLE_SCRUB
# T0: parks toolhead1, optionally scrubs toolhead0 and brings toolhead0 to where toolhead1 was
# T1: vice versa
# _SWAP_T0, SWAP_T1: swaps toolheads with simultaneous movement
# _PARK_TOOL: parks the current toolhead to corresponding side
# _NOZZLE_SCRUB: scrubs the nozzle against the brush

[gcode_macro T0]
description: Activate T0 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set tweaked_z_offset = printer.gcode_move.homing_origin.z|round(3)|float %}
    {% set do_scrub = dcvars.scrub|int %}
    {% if printer.dual_carriage is defined %}
        {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
            M400
            {% if dcvars.swap_toolheads == 1 %}
                SAVE_GCODE_STATE NAME=swap_state
                RESPOND MSG="Swap change"
                _SWAP_T0
                RESTORE_GCODE_STATE NAME=swap_state
            {% else %}
                RESPOND MSG="Classic Change"
                {% if dcvars.autopark == 1 %}
                    # z-hop
                    {% if dcvars.z_hop|float > 0.0 %}
                        {% set max_z = printer.toolhead.axis_maximum.z|float %}
                        {% set cur_z = printer.toolhead.position.z|float %}
                        {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
                        G91
                        G1 Z{z_safe}
                        G90
                    {% endif %}
                    # park tool
                    SAVE_GCODE_STATE NAME=toolhead_state
                    _PARK_TOOL
                    # Stealthburner LED Section ##
                    # STATUS_READY               #
                    # End LED Section ############
                {% endif %}
                # toggle carriage
                ACTIVATE_EXTRUDER EXTRUDER=extruder
                SET_DUAL_CARRIAGE CARRIAGE=0
                # Scrub the nozzle if enabled
                {% if do_scrub == 1 %}
                    _NOZZLE_SCRUB
                {% endif %}
                {% if dcvars.autopark == 1 %}
                    RESTORE_GCODE_STATE NAME=toolhead_state MOVE={dcvars.immediate_move} MOVE_SPEED={dcvars.movespeed}
                {% endif %}
                # restore z
                {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
                    G91
                    G1 Z-{z_safe}
                    G90
                {% endif %}
            {% endif %}
            # Set the offsets
            {% if tweaked_z_offset == 0 %}
              #Z-Offset was cleared when T1 was active, this can cause errors and compound offset if done repeatedly
              SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=1
            {% else %}
              SET_GCODE_OFFSET X=0 Y=0 Z={(tweaked_z_offset - dcvars.offset_z)|round(3)} MOVE=1
            {% endif %}
            # print fan speed
            _SET_PRINT_FANS_SPEED
        {% endif %}
        
        # Stealthburner LED Section ##
        RESPOND MSG={params.LED}
        {% if params.LED == "1" %}
          STATUS_PRINTING_T0
        {% endif %}
        # End LED Section ############
    {% endif %}

#####################################################################
#   _SWAP_T0 macro
#   Change to T0 via quick swap\
#   Ported from Vcore IDEX macros by Helge Keck
#####################################################################

[gcode_macro _SWAP_T0]
description: Perform toolhead swap for T0
gcode:
    M400
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    # Get position of both tool heads
    {% set t0_curr_pos = printer.configfile.config.stepper_x.position_endstop|float + dcvars.park_distance %}
    {% set t1_curr_pos = printer.toolhead.position.x|float %}
    {% set t0_new_x = t1_curr_pos - dcvars.offset_x %}
    {% set t1_new_x = printer.configfile.config.dual_carriage.position_max|float - dcvars.park_distance %}
    {% set t0_distance = t0_new_x - t0_curr_pos %}
    {% set t1_distance = t1_new_x - t1_curr_pos %}
    # If T0 is moving further or the same as T1
    {% if t0_distance >= t1_distance %}
        # Set mode to copy
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
        # Perform the copy mode move
        G0 X{t0_curr_pos + (t1_distance)} F{dcvars.feedrate}
        # Remove T1 from copy mode
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        # Stealthburner LED Section ##
        # STATUS_READY               #
        # End LED Section ############
        # Finish moving T0 into position
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
        G0 X{t0_new_x} F{dcvars.feedrate}
    # if T0 is moving less than T1
    {% elif t0_distance < t1_distance %}
        # Set mode to copy
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
        # Perform the copy mode move
        G0 X{t0_new_x} F{dcvars.feedrate}
        # Finish moving T1
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        G0 X{t1_new_x} F{dcvars.feedrate}
        # Stealthburner LED Section ##
        # STATUS_READY               #
        # End LED Section ############
        # Set the active carriage to T0
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder

#####################################################################
#   T1 macro
#   In PRIMARY mode activates tool 1, parks tool 0 if enabled
#####################################################################

[gcode_macro T1]
description: Activate T1 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set tweaked_z_offset = printer.gcode_move.homing_origin.z|round(3)|float %}
    {% set do_scrub = dcvars.scrub|int %}
    {% if printer.dual_carriage is defined %}
        {% if printer.dual_carriage.carriage_1 == "INACTIVE" %}
            M400
            {% if dcvars.swap_toolheads == 1 %}
                SAVE_GCODE_STATE NAME=swap_state
                RESPOND TYPE=echo MSG="T1 Swap Change"
                _SWAP_T1
                RESTORE_GCODE_STATE NAME=swap_state
            {% else %}
                RESPOND TYPE=echo MSG="Classic Change"
                {% if dcvars.autopark == 1 %}
                    # z-hop
                    {% if dcvars.z_hop|float > 0.0 %}
                        {% set max_z = printer.toolhead.axis_maximum.z|float %}
                        {% set cur_z = printer.toolhead.position.z|float %}
                        {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
                        G91
                        G1 Z{z_safe}
                        G90
                    {% endif %}
                    # park tool
                    SAVE_GCODE_STATE NAME=toolhead_state
                    _PARK_TOOL
                    # Stealthburner LED Section ##
                    # STATUS_READY               #
                    # End LED Section ############                    
                {% endif %}
                # toggle carriage
                ACTIVATE_EXTRUDER EXTRUDER=extruder1
                SET_DUAL_CARRIAGE CARRIAGE=1
                # Scrub the nozzle if enabled
                {% if do_scrub == 1 %}
                    _NOZZLE_SCRUB
                {% endif %}
                {% if dcvars.autopark == 1 %}
                    RESTORE_GCODE_STATE NAME=toolhead_state MOVE={dcvars.immediate_move} MOVE_SPEED={dcvars.movespeed}
                {% endif %}
                # restore z
                {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
                    G91
                    G1 Z-{z_safe}
                    G90
                {% endif %}
            {% endif %}
            # offsets
            {% if ((tweaked_z_offset + dcvars.offset_z)|round(3)) == 0 %}
                {% set tweaked_z_offset = tweaked_z_offset + 0.001 %} #never allow the tweaked offset and set offset to equal 0 causes compounding issues
            {% endif %}
            SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={(tweaked_z_offset+dcvars.offset_z)|round(3)} MOVE=1
            # print fan speed
            _SET_PRINT_FANS_SPEED
        {% endif %}
        
        # Stealthburner LED Section ##
        RESPOND MSG={params.LED}
        {% if params.LED == "1" %}
          STATUS_PRINTING_T1
        {% endif %}
        # End LED Section ############
    {% endif %}

#####################################################################
#   _SWAP_T1 macro
#   Change to T1 via quick swap
#   Ported from Vcore IDEX macros by Helge Keck
#####################################################################
[gcode_macro _SWAP_T1]
description: Perform toolhead swap for T1
gcode:
    M400
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    # Get position of both tool heads
    {% set t0_curr_pos = printer.toolhead.position.x|float %}
    {% set t1_curr_pos = printer.configfile.config.dual_carriage.position_max|float - dcvars.park_distance %}
    {% set t0_new_x = printer.configfile.config.stepper_x.position_endstop|float + dcvars.park_distance %}
    {% set t1_new_x = t0_curr_pos %}
    {% set t0_distance = (t0_curr_pos - t0_new_x) %}
    {% set t1_distance = (t1_curr_pos - t1_new_x) %}
    # If T0 is moving further or the same as T1
    {% if t0_distance >= t1_distance %}
        # Set mode to copy
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
        # Perform the copy mode move
        G0 X{t0_curr_pos - (t1_distance + dcvars.offset_x)} F{dcvars.feedrate}
        # Finish moving T0 into position
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
        G0 X{t0_new_x} F{dcvars.feedrate}
        # Stealthburner LED Section ##
        # STATUS_READY               #
        # End LED Section ############
        # Activate T1 carriage
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    # if T0 is moving less than T1
    {% elif t0_distance < t1_distance %}
        # Set mode to copy
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
        # Perform the copy mode move
        G0 X{t0_new_x} F{dcvars.feedrate}
        # Activate T1 carriage
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        # Finish moving T1 into position
        G0 X{t1_new_x} F{dcvars.feedrate}
        # Stealthburner LED Section ##
        # STATUS_READY               #
        # End LED Section ############
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1


#####################################################################
#   _PARK_TOOL
#   Parks toolhead at the far end of the axis
#####################################################################
[gcode_macro _PARK_TOOL]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if printer.dual_carriage is defined %}
        SAVE_GCODE_STATE NAME=park_tool
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        G90
        {% if printer.toolhead.extruder == 'extruder' %}
            {% set XPOS = printer.configfile.config.stepper_x.position_endstop|float + dcvars.park_distance %}
            G1 X{XPOS} F{dcvars.feedrate}
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            {% set XPOS = printer.configfile.config.dual_carriage.position_max|float - dcvars.park_distance %}
            G1 X{XPOS} F{dcvars.feedrate}
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
        # STATUS_READY # TODO: setup Stealthburner LEDs
        RESTORE_GCODE_STATE NAME=park_tool
    {% endif %}

#####################################################################
#   _NOZZLE_SCRUB
#   Brushes nozzle across wipers to remove ooze.
#   by dorkscript in #tridex_dev
#####################################################################

[gcode_macro _NOZZLE_SCRUB]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if printer.dual_carriage is defined and printer.toolhead.extruder in ['extruder', 'extruder1'] %}
        G90 ; Absolute Positioning
        {% set MIN = 1 %}
        {% set MAX = 20.0 %}
        {% set T0_MIN = printer.configfile.config.stepper_x.position_min|float + dcvars.park_distance %}
        {% set T1_MIN = printer.configfile.config.dual_carriage.position_max|float - dcvars.park_distance %}
        {% if printer.toolhead.extruder == 'extruder' %}
            {% set TEMP = printer.extruder.temperature %}
            {% set XMAX = T0_MIN %}
            {% set XPOS = T0_MIN + (MIN|float) %}
            {% set XPOS1 = T0_MIN + (MAX|float) %}
        {% else %}
            {% set TEMP = printer.extruder1.temperature %}
            {% set XMAX = T1_MIN %}
            {% set XPOS = T1_MIN - (MIN|float) %}
            {% set XPOS1 = T1_MIN - (MAX|float) %}
        {% endif %}

        # If extruder hot enough, purge
        {% if TEMP >= dcvars.purge_temp_min %}
            G90 ; Absolute Positioning
            G1 X{XMAX} F{dcvars.prep_spd_xy}
            M83      ; relative mode
            G1 E{dcvars.purge_length} F{dcvars.purge_spd}
            G1 E-{dcvars.purge_ret} F{dcvars.purge_spd * 5}

            G90 ; Absolute Positioning
            G1 X{XPOS} F{dcvars.prep_spd_xy}
            G4 P{dcvars.ooze_dwell * 1000} ; pause
            G92 E0   ; reset extruder
    
            G90 ; Absolute Positioning
            G1 X{XPOS1} F{dcvars.prep_spd_xy}
            {% for i in range(dcvars.scrubs) %}
                G1 X{XPOS} F{dcvars.feedrate}
                G1 X{XPOS1} F{dcvars.feedrate}
            {% endfor %}
            G1 X{XPOS} F{dcvars.prep_spd_xy}
        {% endif %}
        G90 ; Absolute Positioning
    {% endif %}

#####################################################################
#   Client Variable 
#   - This overrides the park position in the mainsail.cfg PAUSE macro
#   !!! Required when using copy and mirror modes !!!
#   !!! Uncomment ONLY for Mainsail installation
#   for Fluidd, edit x_park and y_park in the pause macro in fluidd.cfg 
#   to a position T0 can reach and not crash T1 while in copy or mirror mode.    
#####################################################################

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 125    ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 350    ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_user_cancel_macro: "RESET_DC"
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]\
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode: